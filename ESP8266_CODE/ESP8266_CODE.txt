
#include <FirebaseESP8266.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 13
#define LED_COUNT 64

const char *SSID = <YOUR SSID>;
const char *PASSWORD = <YOUR PASSWORD>;
const char *FIREBASE_HOST = <YOUR FIREBASE_HOST>;
const char *FIREBASE_AUTH = <YOUR FIREBASE_AUTH>;

FirebaseData firebaseData;
FirebaseData ledFirebase , colorFire, setLedStrip, brightnessFB ,test;

//Choose yout frame
const String PATH = "/Frame_1";
//const String PATH = "/Frame_2";

const int indexes[64] = {0,1,2,3,4,5,6,7,
                        15,14,13,12,11,10,9,8,
                        16,17,18,19,20,21,22,23,
                        31,30,29,28,27,26,25,24,
                        32,33,34,35,36,37,38,39,
                        47,46,45,44,43,42,41,40,
                        48,49,50,51,52,53,54,55,
                        63,62,61,60,59,58,57,56};
 
 
boolean diodaState;
int brightness = 50;
uint32_t testColor;
String color;

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

void setup() { 

  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(brightness); // Set BRIGHTNESS to about 1/5 (max = 255)

  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);

  diodaState = false;

  while (WiFi.status() != WL_CONNECTED) {  //Wait for connection
      myNetwork();
    delay(500);
    Serial.println("Waiting to connectâ€¦");
  }
 
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  Firebase.begin(FIREBASE_HOST,FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
  settingLayers();
}

void myNetwork() {
  int flag = 1;
  Serial.println("Searching Wifi......");
  int network = WiFi.scanNetworks();
  for (int i = 0 ; i < network; i++) {
    switch (flag) {
      case 1: 
        flag =2;
        if (WiFi.SSID(i) == SSID_1) {
          WiFi.begin(SSID_1, PASSWORD_1);
          Serial.println("Wifi Found");
          delay(2000);
          Serial.println("Connecting with "+String(SSID_1)+" Please Wait ");
          delay(8000);
          break;
        }
        case 2:
           flag =1;
           if (WiFi.SSID(i) == SSID) {
          WiFi.begin(SSID, PASSWORD);
          Serial.println("Wifi Found");
          delay(2000);
          Serial.println("Connecting with "+String(SSID)+" Please Wait ");
          delay(8000);
          break;
        }
    }
  }
}
 
void loop() {
  if(Firebase.getInt(brightnessFB, PATH+"_brightness")){
    if(brightness!=brightnessFB.intData()){
      brightness=brightnessFB.intData();
      strip.setBrightness(brightness);
      strip.show();
    }
  }

 if (Firebase.getBool(setLedStrip, PATH+"_SET")){   
   if(setLedStrip.boolData()){
    settingLayers();
    Firebase.setBool(setLedStrip, PATH+"_SET",false);
   }  
  }

   if (Firebase.getInt(ledFirebase, "/message")){       
    if (ledFirebase.intData()==1) {
    digitalWrite(LED_BUILTIN, HIGH);
    }
  else{
    digitalWrite(LED_BUILTIN, LOW);
    }
  }
}
 
void handleRootPath() {          
  if(diodaState){
    digitalWrite(LED_BUILTIN, HIGH);
    diodaState = false;
  }
  else{
    digitalWrite(LED_BUILTIN, LOW);
    diodaState = true;
  }
}


void settingLayers(){
  String red, green, blue ;
  uint32_t r,g,b, finalColor, counter = 0;
  String colorOnLayer = "";
   for(int j=1;j<=8;j++){
    String path = PATH+"/layer_" + String(j);
    Firebase.getString(colorFire, path);
    colorOnLayer = colorFire.stringData();
     for(int i=0;i<8;i++){
       String color = colorOnLayer.substring(i*9,i*9+9);
        red = color.substring(0,3);
        green = color.substring(3,6);
        blue = color.substring(6);
        r = red.toInt();
        g = green.toInt();
        b = blue.toInt();
        finalColor = strip.Color(r,g,b);
        strip.setPixelColor(indexes[counter], finalColor);
        counter++;
      }
    }
     strip.show();
}

